<div class="row">
  <div class="col-md-12">
    <div class="alert alert-info">
<!--      <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button> -->
      <%= t('general.info') %>
    </div>
  </div>
<div>
  <ul class="nav nav-tabs" role="tablist">
    <li role="presentation" class="<%= params['mode'].to_s!='advanced' ? ' active' : '' %>"><a href="#basic" aria-controls="basic" role="tab" data-toggle="tab"><%= t('general.basic_tab') %></a></li>
    <li role="presentation" class="<%= params['mode'].to_s=='advanced' ? ' active' : '' %>"><a href="#advanced" aria-controls="advanced" role="tab" data-toggle="tab"><%= t('general.advanced_tab') %></a></li>
  </ul>
  <div class="tab-content">
    <div role="tabpanel" class="tab-pane<%= params[:mode].to_s!='advanced' ? ' active' : '' %>" id="basic">
      <div class="col-md-6" style="margin-top: 15px;">

        <div id="drop-area">
          <form class="drag-form">
            <p><%= t('general.upload_info') %></p>
            <input type="file" id="fileElem" onchange="handleFiles(this.files[0])">
            <label class="button" for="fileElem"><%= t('general.select_file') %></label>
          </form>
          <progress id="progress-bar" max=100 value=0></progress><div id="hash-progress" style="display: none; margin: 0 5px; vertical-align: text-bottom;"><%= t('general.wait_hash') %></div>
        </div>
      </div>
      <div class="col-md-6" style="margin-top: 15px;">
        <div id="hash" style="margin: 7px; word-wrap: break-word;"></div>
        <%= form_with url: submit_path do |form| %>
          <%= form.hidden_field :hash_field, id:"hash_field" %>
          <%= form.button t('general.submit'), class: "btn btn-primary", style:"margin: 7px;" %>
          <a href="/<%= I18n.locale.to_s %>" class="btn btn-default"><%= t('general.reset') %></a>
        <% end %>
      </div>
    </div>
    <div role="tabpanel" class="tab-pane<%= params['mode'].to_s=='advanced' ? ' active' : '' %>" id="advanced">
      <div class="row">
        <div class="col-md-6" style="margin-top: 20px;">
          <%= form_with url: submit_path do |form| %>
            <%= form.hidden_field :mode, value:"advanced" %>
            <%= form.label :hash_field, t('general.hash_value') %><br>
            <%= form.text_area :hash_field, rows: "4", style:"width: 100%" %><br>

            <% flash.each do |message_type, message| %>
                <div class="alert alert-<%= message_type %>"><%= message %></div>
            <% end %>

            <%= form.button t('general.submit'), class: "btn btn-primary", style:"margin: 7px;" %>
            <a href="/<%= I18n.locale.to_s %>" class="btn btn-default"><%= t('general.reset') %></a>
          <% end %>
        </div>
        <div class="col-md-6" style="padding: 15px;">
          <p><%= t('general.advanced_info') %></p>
          <strong><%= t('general.calc_hash') %></strong><br>
          <pre>cat file.dat | openssl dgst -sha256</pre>
          <strong><%= t('general.sign_calc_hash') %></strong><br>
          <pre>cat file.dat | \
    gpg --detach-sig -u your.email@provider.com | \ 
    openssl dgst -sha256</pre>
        </div>
      </div>
    </div>
  </div>

</div>

</div>
<% if @show_response %>
  <div class="row" style="margin-top: 20px;">
    <% if I18n.locale.to_s == "de" %>
      <div class="col-md-12">
        Diese Datei wurde das erste Mal am <%= @oyd_ts %> hochgeladen
        <% if @root_node.to_s == "" %>
          und wird in ca. <%= @wait %> Stunden versiegelt.
        <% else %>
          und am <%= @ether_ts %> versiegelt.<br><br>
          So kannst du das Siegeldatum nachweisen:
          <ol>
            <li>Erstelle von der Datei den Hashwert (<%= @hash %>) - zum Beispiel <a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank">hier</a></li>
            <li>Berechne mit dem Hashwert und den folgenden Werten den 
              <a href="https://de.wikipedia.org/wiki/Merkle-Baum" target="_blank">Merkle Wurzelknoten</a> wie in <a href="https://tools.ietf.org/html/rfc6962" target="_blank">RFC 6962</a> beschrieben:<br>
              <%= @audit_proof %></li>
            <li>überprüfe, ob der Merkle Wurzelknoten (<%= @root_node %>) in der Ethereum Blockchain an der folgenden Adresse 
              gespeichert ist: <%= @address[2..@address.length] %> (auf <a href="https://etherscan.io/tx/<%= @address %>" target="_blank">auf Etherscan.io anzeigen</a>)</li>
            <li>der in der Ethereum Blockchain an der angegebenen Adresse gespeicherte Zeitstempel ist der unabhängig verifizierte Zeitpunkt für den ersten Upload der Datei / für das Siegeldatum</li>
          </ol>
          <button onclick="window.print();" class="btn btn-default"><i class="fa fa-print" aria-hidden="true"></i>
 <%= t('general.print') %></a>
        <% end %>
      </div>
    <% else %>
      <div class="col-md-12">
        This file was uploaded for the first time on <%= @oyd_ts %>
        <% if @root_node.to_s == "" %>
          and will be sealed in about <%= @wait %> hours.
       <% else %>
          and sealed at <%= @ether_ts %>.<br><br>
          How to prove the seal date:
          <ol>
            <li>Create the hash value (<%= @hash %>) of the file - for example <a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank">here</a></li>
            <li>Use the hash value and the following hashes to calculate the <a href="https://en.wikipedia.org/wiki/Merkle_tree" target="_blank">Merkle root node</a> as described in <a href="https://tools.ietf.org/html/rfc6962" target="_blank">RFC 6962</a>:<br>
              <%= @audit_proof %></li>
            <li>Check if the Merkle root node (<%= @root_node %>) is stored in the Ethereum blockchain at the following address: <%= @address[2..@address.length] %> (auf <a href="https://etherscan.io/tx/<%= @address %>" target="_blank">show on Etherscan.io</a>)</li>
            <li>the timestamp stored in the Ethereum blockchain at the specified address is the independently verified time for the first upload of the file / seal date</li>
          </ol>
          <button onclick="window.print();" class="btn btn-default"><i class="fa fa-print" aria-hidden="true"></i>
 <%= t('general.print') %></a>
        <% end %>
      </div>
    <% end %>
  </div>
<% end %>

<script type="text/javascript">
// ************************ Drag and drop ***************** //
let dropArea = document.getElementById("drop-area")

// Prevent default drag behaviors
;['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
  dropArea.addEventListener(eventName, preventDefaults, false)   
  document.body.addEventListener(eventName, preventDefaults, false)
})

// Highlight drop area when item is dragged over it
;['dragenter', 'dragover'].forEach(eventName => {
  dropArea.addEventListener(eventName, highlight, false)
})

;['dragleave', 'drop'].forEach(eventName => {
  dropArea.addEventListener(eventName, unhighlight, false)
})

// Handle dropped files
dropArea.addEventListener('drop', handleDrop, false);

function preventDefaults (e) {
  e.preventDefault()
  e.stopPropagation()
}

function highlight(e) {
  dropArea.classList.add('highlight')
}

function unhighlight(e) {
  dropArea.classList.remove('highlight')
}

function handleDrop(e) {
  console.log('here')
  var dt = e.dataTransfer;
  var file = dt.files[0];

  handleFiles(file);
}

let uploadProgress = []
let progressBar = document.getElementById('progress-bar')

function initializeProgress(numFiles) {
  progressBar.value = 0;
  uploadProgress = [];

  for(let i = numFiles; i > 0; i--) {
    uploadProgress.push(0);
  }
}

function updateProgress(fileNumber, percent) {
  uploadProgress[fileNumber] = percent;
  let total = uploadProgress.reduce((tot, curr) => tot + curr, 0) / uploadProgress.length;
  progressBar.value = total;
}

function handleFiles(file) {
  initializeProgress(1);
  hashFile(file);
}

function arrayBufferToWordArray(ab) {
  var i8a = new Uint8Array(ab);
  var a = [];
  for (var i = 0; i < i8a.length; i += 4) {
    a.push(i8a[i] << 24 | i8a[i + 1] << 16 | i8a[i + 2] << 8 | i8a[i + 3]);
  }
  return CryptoJS.lib.WordArray.create(a, i8a.length);
}

function hashCalcStart() {
  updateProgress(0, 100);
  document.getElementById('hash-progress').style.display ="inline";
};

function hashCalcEnd() {
  initializeProgress(1);
  document.getElementById('hash-progress').style.display ="none";
};


function hashFile(file) {
  // let textType = /text.*/;
  var reader = new FileReader();

  reader.onprogress = function(event) {
    if (event.lengthComputable) {
      updateProgress(0, (event.loaded * 100.0 / event.total) || 100);
    }
  };

  reader.onloadend = (function(theFile) {
    return function(evt) {
      hashCalcStart();
      setTimeout(function() {
        var arrayBuffer = evt.target.result;
        var hash_div = document.getElementById("hash");

        var hash = CryptoJS.SHA256(arrayBufferToWordArray(arrayBuffer));
        document.getElementById("hash").innerHTML = "<%= t('general.fingerprint_info') %>" + theFile.name + ": " + hash;
        console.log("hash of " + theFile.name + ": " + hash);
        document.getElementById("hash_field").value = hash;
        hashCalcEnd();
      }, 100);
    };

  })(file);
  reader.onerror = function(e) {
    console.error(e);
  };
  reader.readAsArrayBuffer(file);
}
</script>
